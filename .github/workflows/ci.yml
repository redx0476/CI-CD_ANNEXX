name: CI

on:
  pull_request:
    branches: [ master, main, develop ]
  push:
    branches: [ master, main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Mondays 02:00 UTC

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RAILS_ENV: test
  DISABLE_SPRING: "1"
  SIMPLECOV_MIN_COVERAGE: "90"  # enforced in spec helper
  RUBYCRITIC_MIN_SCORE: "90"    # 0-100
  DATABASE_HOST: 127.0.0.1
  DATABASE_PORT: "5432"
  DATABASE_USERNAME: postgres
  DATABASE_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/annexx_test

jobs:
  code_quality:
    name: üßπ Ruby Style & Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: StandardRB (preferred)
        run: |
          if bundle exec standardrb --version >/dev/null 2>&1; then
            bundle exec standardrb
          else
            echo "standardrb not found; falling back to rubocop."
          fi

      - name: RuboCop (fallback / extra cops)
        run: |
          if bundle exec rubocop -V >/dev/null 2>&1; then
            bundle exec rubocop --parallel -f github
          else
            echo "rubocop not found; skipped."
          fi

      - name: Rails Best Practices (optional)
        run: |
          if bundle exec rails_best_practices -v >/dev/null 2>&1; then
            bundle exec rails_best_practices . || echo "Rails best practices completed"
          else
            echo "rails_best_practices not in Gemfile; skipped."
          fi

  javascript_quality:
    name: üß© JavaScript & jQuery Quality (importmap-only)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node (for npx)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify importmap configuration
        run: |
          echo "üîç Checking importmap..."
          if [ -f "config/importmap.rb" ]; then
            echo "üì¶ Pins:"; grep -E "^\s*pin " config/importmap.rb || echo "No pins"
            if grep -E "http://" config/importmap.rb; then
              echo "‚ùå HTTP source in importmap.rb. Use HTTPS."; exit 1
            fi
            bin/importmap json || echo "Importmap validation completed"
          else
            echo "‚ö†Ô∏è  No config/importmap.rb found"
          fi

      - name: Detect JS files (respect .standardignore)
        id: detect_js
        shell: bash
        run: |
          set -e
          shopt -s globstar nullglob

          roots=()
          for d in app/javascript app/assets/javascripts; do
            [ -d "$d" ] && roots+=("$d")
          done

          files=()
          for r in "${roots[@]}"; do
            files+=("$r"/**/*.js)
          done

          ignore_re=""
          if [ -f .standardignore ]; then
            mapfile -t ig < <(sed -e 's/#.*$//' -e '/^\s*$/d' .standardignore)
            for pat in "${ig[@]}"; do
              rx="$pat"
              rx="${rx//\./\\.}"
              rx="${rx//**\//.*/}"
              rx="${rx//\*\*/.*}"
              rx="${rx//\*/[^/]*}"
              rx="${rx%/}(/.*)?"
              [ -z "$ignore_re" ] && ignore_re="($rx)" || ignore_re="$ignore_re|($rx)"
            done
          fi

          : > /tmp/js_files.txt
          if [ -n "$ignore_re" ]; then
            for f in "${files[@]}"; do
              [[ "$f" =~ $ignore_re ]] || echo "$f" >> /tmp/js_files.txt
            done
          else
            printf '%s\n' "${files[@]}" > /tmp/js_files.txt
          fi

          if [ ! -s /tmp/js_files.txt ]; then
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "No JS files to lint after applying .standardignore (or no JS dirs)."
          else
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "Files to lint:"
            cat /tmp/js_files.txt
          fi

      - name: StandardJS (auto-fix; no package.json)
        if: steps.detect_js.outputs.found == 'true'
        id: stdfix
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          npx --yes standard@17 --fix $(cat /tmp/js_files.txt) || true
          if ! git diff --quiet; then
            git diff > /tmp/standardjs-fix.patch
            echo "had_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "had_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload StandardJS autofix patch
        if: steps.detect_js.outputs.found == 'true' && steps.stdfix.outputs.had_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: standardjs-autofix-patch
          path: /tmp/standardjs-fix.patch

      - name: Enforce clean JS style (fail if changes were needed)
        if: steps.detect_js.outputs.found == 'true' && steps.stdfix.outputs.had_changes == 'true'
        run: |
          echo "::error::StandardJS formatted files. Apply patch from artifacts or run: npx standard --fix"
          exit 1

      - name: Lightweight JS security sanity
        shell: bash
        run: |
          set -e
          js_dirs=()
          for d in app/javascript app/assets/javascripts; do
            [ -d "$d" ] && js_dirs+=("$d")
          done
          if [ ${#js_dirs[@]} -eq 0 ]; then
            echo "No JS directories found; skipping JS security sanity."
            exit 0
          fi
          if grep -RIl --include='*.js' 'eval(' "${js_dirs[@]}" | head -1 ; then
            echo "‚ùå Found eval() usage"; exit 1
          fi
          if grep -RIl --include='*.js' -E 'innerHTML\s*=' "${js_dirs[@]}" | head -1 ; then
            echo "‚ö†Ô∏è  innerHTML usage detected; ensure sanitization"
          fi

  dry_analysis:
    name: üß¨ DRY & Smell Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install analysis CLIs
        run: |
          gem install flay --no-document
          gem install flog --no-document
          gem install reek --no-document

      - name: Flay (duplication)
        run: |
          bundle exec flay --verbose --minimum 50 app/ lib/ || true
          bundle exec flay --diff --minimum 40 app/ lib/ > flay_report.txt || true

      - name: Reek (smells)
        run: |
          cat > .reek.yml <<'EOF'
          ---
          detectors:
            IrresponsibleModule: { enabled: false }
            TooManyInstanceVariables: { max_instance_variables: 9 }
            TooManyMethods: { max_methods: 25 }
            TooManyStatements: { max_statements: 15 }
            LongParameterList: { max_params: 4 }
            DuplicateMethodCall: { enabled: true, max_calls: 2 }
          EOF
          bundle exec reek --format github app/ lib/ || true

      - name: Flog (complexity)
        run: |
          bundle exec flog --all --continue --methods-only app/ lib/ > flog_report.txt || true
          if grep -E "^\s*[5-9][0-9]\.[0-9]+:" flog_report.txt; then
            echo "‚ùå Highly complex methods (flog > 50)"; exit 1
          fi

      - name: Upload DRY artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dry-analysis
          path: |
            flay_report.txt
            flog_report.txt
            .reek.yml

  security_scan:
    name: üîí Security Scans
    runs-on: ubuntu-latest
    needs: [code_quality, javascript_quality, dry_analysis]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Brakeman
        run: |
          bin/brakeman --no-pager --format json --output brakeman.json
          bin/brakeman --no-pager --exit-on-warn

      - name: Upload Brakeman report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman
          path: brakeman.json

      - name: Importmap audit
        run: bin/importmap audit

      - name: Bundler Audit
        run: |
          gem install bundler-audit --no-document
          bundle audit check --update

  database_tests:
    name: üóÉÔ∏è Database & Migrations
    runs-on: ubuntu-latest
    needs: [code_quality]
    services:
      postgres:
        image: postgres:16
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: annexx_test
        options: >-
          --health-cmd="pg_isready -U postgres -d annexx_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Wait for Postgres
        run: |
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d annexx_test && break
            sleep 1
          done

      - name: Setup DB
        run: |
          bin/rails db:create
          bin/rails db:schema:load

      - name: Migrate forward & rollback smoke
        run: |
          bin/rails db:migrate
          bin/rails db:rollback STEP=1 || true
          bin/rails db:migrate

      - name: Multi-DB schema loads (cache/queue/cable)
        run: |
          (bin/rails -T | grep -q "db:schema:load:cache") && bin/rails db:schema:load:cache || true
          (bin/rails -T | grep -q "db:schema:load:queue") && bin/rails db:schema:load:queue || true
          (bin/rails -T | grep -q "db:schema:load:cable") && bin/rails db:schema:load:cable || true

      - name: Schema drift check
        run: |
          bin/rails db:schema:dump
          git diff --exit-code db/schema.rb || (echo "‚ùå Schema changed; commit schema.rb" && exit 1)

  test_suite:
    name: ‚úÖ RSpec + Coverage + RubyCritic
    runs-on: ubuntu-latest
    needs: [code_quality, javascript_quality, dry_analysis, database_tests]
    services:
      postgres:
        image: postgres:16
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: annexx_test
        options: >-
          --health-cmd="pg_isready -U postgres -d annexx_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Wait for Postgres
        run: |
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d annexx_test && break
            sleep 1
          done

      - name: Prepare DB
        run: bin/rails db:prepare

      - name: RSpec (with SimpleCov)
        run: bundle exec rspec --format documentation --out rspec.txt

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: RubyCritic (quality gate)
        run: |
          if bundle exec rubycritic --version >/dev/null 2>&1; then
            # Use --path (not --report-dir). JSON output to tmp/rubycritic.
            bundle exec rubycritic --no-browser --minimum-score $RUBYCRITIC_MIN_SCORE --format json --path tmp/rubycritic .
          else
            echo "rubycritic not found; skipped."
          fi

      - name: Upload RubyCritic report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rubycritic
          path: tmp/rubycritic

  ci_summary:
    name: üßæ CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      - code_quality
      - javascript_quality
      - dry_analysis
      - security_scan
      - database_tests
      - test_suite
    steps:
      - name: Build Summary
        run: |
          echo "## üöÄ CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------:|:------|" >> $GITHUB_STEP_SUMMARY
          echo "| Ruby Style | **${{ needs.code_quality.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| JS Quality | **${{ needs.javascript_quality.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| DRY/Smells | **${{ needs.dry_analysis.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | **${{ needs.security_scan.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| DB/Migrations | **${{ needs.database_tests.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests/Quality | **${{ needs.test_suite.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ Gates" >> $GITHUB_STEP_SUMMARY
          echo "- SimpleCov minimum: **${SIMPLECOV_MIN_COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "- RubyCritic minimum score: **${RUBYCRITIC_MIN_SCORE}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: \`coverage/\`" >> $GITHUB_STEP_SUMMARY
          echo "- RubyCritic: \`tmp/rubycritic/\`" >> $GITHUB_STEP_SUMMARY
          echo "- DRY: \`flay_report.txt\`, \`flog_report.txt\`" >> $GITHUB_STEP_SUMMARY
